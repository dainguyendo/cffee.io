// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Journal       Journal[]
  Setup         Setup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BrewMethod {
  AEROPRESS
  BIALETTI
  COLD_BREW
  ESPRESSO
  FRENCH_PRESS
  PHIN
  POUR_OVER
  SIPHON
}

enum Rating {
  VERY_BAD
  BAD
  AVERAGE
  GOOD
  VERY_GOOD
}

model Bean {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  roaster      String
  roast        String
  singleOrigin Boolean
  state        String?
  countryCode  String
  rating       Rating?
  Journal      Journal[]
  Setup        Setup[]
}

model Journal {
  id                         String     @id @default(cuid())
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  userId                     String
  beanId                     String
  brewMethod                 BrewMethod
  rating                     Rating
  grinder                    String
  grindDescription           String
  waterTemperatureFahrenheit Int
  note                       Json?
  bean                       Bean       @relation(fields: [beanId], references: [id])
  user                       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setup {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  brewMethod BrewMethod?
  grinder    String?
  beanId     String?
  default    Boolean?    @default(false)
  bean       Bean?       @relation(fields: [beanId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}
